from telegram import Bot, Update
from telegram.error import TelegramError
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from ..config.settings import settings
from ..utils import logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=settings.telegram_bot_token)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /getChatId
async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ chat_id.
    """
    chat_id = update.message.chat_id
    await update.message.reply_text(f"–í–∞—à chat_id: {chat_id}")

async def send_alert(message: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram.
    """
    try:
        await bot.send_message(chat_id=settings.telegram_chat_id, text=message)
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def notify_dos_attack(incident: dict) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ DOS-–∞—Ç–∞–∫–µ.
    """
    if settings.notifications.dos.condition:
        message = (
            "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ DOS-–∞—Ç–∞–∫–∞!\n"
            f"IP: {incident['ip']}\n"
            f"–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {incident['requests_per_second']}\n"
            f"–í—Ä–µ–º—è: {incident['timestamp']}"
        )
        await send_alert(message)

async def notify_container_stopped(container_name: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
    """
    if settings.notifications.container_stopped.condition:
        message = f"üö® –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {container_name}"
        await send_alert(message)

async def notify_ram_usage(usage_percent: float) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RAM.
    """
    if settings.notifications.ram.condition and usage_percent >= settings.notifications.ram.percent:
        message = f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RAM: {round(usage_percent)}%"
        await send_alert(message)

async def notify_cpu_usage(usage_percent: float) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ CPU.
    """
    if settings.notifications.cpu.condition and usage_percent >= settings.notifications.cpu.percent:
        message = f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU: {round(usage_percent)}%"
        await send_alert(message)

async def notify_storage_usage(usage_percent: float) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.
    """
    if settings.notifications.storage.condition and usage_percent >= settings.notifications.storage.percent:
        message = f"‚ö†Ô∏è –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: {round(usage_percent)}%"
        await send_alert(message)

async def notify_test_message() -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    message = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    await send_alert(message)

async def start_bot() -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞
        application = ApplicationBuilder().token(settings.telegram_bot_token).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getChatId
        application.add_handler(CommandHandler("getChatId", get_chat_id))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")