import asyncio
from datetime import datetime

from telegram import Bot, Update, BotCommand
from telegram.error import TelegramError
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from ..config.settings import settings
from ..utils import logger, load_dos_data

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=settings.telegram_bot_token)

TELEGRAM_MESSAGE_LIMIT = 4096

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /get_chat_id
async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ chat_id.
    """
    chat_id = update.message.chat_id
    await update.message.reply_text(f"–í–∞—à chat_id: {chat_id}")

async def get_dos_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DOS-–∞—Ç–∞–∫–∞—Ö, –µ—Å–ª–∏ –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.
    """
    user_chat_id = update.message.chat_id
    if user_chat_id != int(settings.telegram_chat_id):
        await update.message.reply_text("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ")
        return

    dos_data = await load_dos_data()
    if not dos_data:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    incidents = []
    for incident in dos_data:
        try:
            time_start_value = incident["timeStart"]
            if isinstance(time_start_value, str):
                time_start_value = float(time_start_value)
            time_start = datetime.fromtimestamp(time_start_value).strftime("%d.%m.%Y %H:%M:%S")
        except (ValueError, TypeError) as e:
            time_start = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è"
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}, incident: {incident}")

        incident_text = (
            f"------------------------\n"
            f"–¢–∏–ø –∞—Ç–∞–∫–∏: {incident['type']}\n"
            f"IP-–∞–¥—Ä–µ—Å: {incident['sourceIp']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤: {incident['count']}\n"
            f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {time_start}\n"
            f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if incident['status'] else '–ó–∞–≤–µ—Ä—à—ë–Ω'}\n"
            f"------------------------"
        )
        incidents.append(incident_text)

    full_message = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ç–∞–∫–∞—Ö\n" + "\n".join(incidents)

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º
    if len(full_message) <= TELEGRAM_MESSAGE_LIMIT:
        await update.message.reply_text(full_message)
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
    current_part = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ç–∞–∫–∞—Ö\n"
    for incident_text in incidents:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–ª–µ–∑–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
        if len(current_part) + len(incident_text) + 1 <= TELEGRAM_MESSAGE_LIMIT:
            current_part += "\n" + incident_text
        else:
            await update.message.reply_text(current_part)
            break

async def send_alert(message: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram.
    """
    try:
        await bot.send_message(chat_id=settings.telegram_chat_id, text=message)
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def notify_dos_attack(incidents: []) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ DOS-–∞—Ç–∞–∫–µ.
    """
    if settings.notifications.dos.condition:
        message = f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞—Ç–∞–∫–∞ \n"

        for incident in incidents:
            time_start = datetime.fromtimestamp(incident["timeStart"]).strftime("%d.%m.%Y %H:%M:%S")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É message
            message = message + (
                f"------------------------\n"
                f"–¢–∏–ø –∞—Ç–∞–∫–∏: {incident['type']}\n"
                f"IP-–∞–¥—Ä–µ—Å: {incident['sourceIp']}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤: {incident['count']}\n"
                f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {time_start}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if incident['status'] else '–ó–∞–≤–µ—Ä—à—ë–Ω'}\n"
                f"------------------------\n"
            )


        await send_alert(message)

async def notify_container_stopped(container_name: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
    """
    if settings.notifications.container_stopped.condition:
        message = f"üö® –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {container_name}"
        await send_alert(message)

async def notify_ram_usage(usage_percent: float) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RAM.
    """
    if settings.notifications.ram.condition and usage_percent >= settings.notifications.ram.percent:
        message = f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RAM: {round(usage_percent)}%"
        await send_alert(message)

async def notify_cpu_usage(usage_percent: float) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ CPU.
    """
    if settings.notifications.cpu.condition and usage_percent >= settings.notifications.cpu.percent:
        message = f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU: {round(usage_percent)}%"
        await send_alert(message)

async def notify_storage_usage(usage_percent: float) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.
    """
    if settings.notifications.storage.condition and usage_percent >= settings.notifications.storage.percent:
        message = f"‚ö†Ô∏è –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: {round(usage_percent)}%"
        await send_alert(message)

async def notify_test_message() -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    message = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    await send_alert(message)

async def set_bot_commands() -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞.
    """
    commands = [
        BotCommand("get_chat_id", "–ü–æ–ª—É—á–∏—Ç—å –≤–∞—à chat_id"),
        BotCommand("get_dos_data", "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å –∞—Ç–∞–∫–∞—Ö"),
    ]
    await bot.set_my_commands(commands)

async def start_bot() -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.
    """
    try:
        application = ApplicationBuilder().token(settings.telegram_bot_token).build()

        application.add_handler(CommandHandler("get_chat_id", get_chat_id))
        application.add_handler(CommandHandler("get_dos_data", get_dos_data))

        await set_bot_commands()

        loop = asyncio.get_event_loop()
        if loop.is_running():
            await application.initialize()
            await application.start()
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π")
            await application.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        else:
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –Ω–æ–≤–æ–º —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π")
            await application.run_polling(allowed_updates=Update.ALL_TYPES)
        await bot.send_message(settings.telegram_chat_id, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise